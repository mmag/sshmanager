package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net"
	"os"
	"os/exec"
	"path/filepath"
	"strings"

	"github.com/gdamore/tcell/v2"
	"github.com/rivo/tview"
)

type SSHConnection struct {
	Server  string `json:"server"`
	Comment string `json:"comment"`
	Port    string `json:"port"`
}

var sshConnections []SSHConnection
var configDir = filepath.Join(os.Getenv("HOME"), "sshman")
var configFilePath = filepath.Join(configDir, "sshman.json")
var menuList *tview.List // добавить в начало файла с другими глобальными переменными
var helpText *tview.TextView

// Добавим константы для размеров форм
const (
	formWidth  = 100 // увеличим ширину для лучшей читаемости
	formHeight = 60  // уменьшим высоту для компактности
)

// Функция для выполнения SSH-команды
func sshConnect(server string) {
	var connection SSHConnection
	for _, conn := range sshConnections {
		if conn.Server == server {
			connection = conn
			break
		}
	}
	sshCommand := "ssh"
	if connection.Port != "" {
		sshCommand = fmt.Sprintf("ssh -p %s", connection.Port)
	}

	cmd := exec.Command("sh", "-c", fmt.Sprintf("%s %s", sshCommand, connection.Server))
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	log.Printf("Подключение к %s\n", connection.Server)
	err := cmd.Run()
	if err != nil {
		log.Printf("Ошибка подключения к %s: %v\n", connection.Server, err)
	}
}

// Обновим функцию centerWidget для фиксированных размеров
func centerWidget(widget tview.Primitive) *tview.Flex {
	widget.SetRect(0, 0, formWidth, formHeight)
	return tview.NewFlex().
		AddItem(nil, 0, 1, false).
		AddItem(tview.NewFlex().
			SetDirection(tview.FlexRow).
			AddItem(nil, 0, 1, false).
			AddItem(widget, formHeight, 0, true).
			AddItem(nil, 0, 1, false), formWidth, 0, true).
		AddItem(nil, 0, 1, false)
}

// Функция проверки существующего соединения
func isConnectionExists(server string) bool {
	for _, conn := range sshConnections {
		if conn.Server == server {
			return true
		}
	}
	return false
}

// Функция валидации IP адреса
func isValidIP(ip string) bool {
	if parts := strings.Split(ip, "@"); len(parts) > 1 {
		ip = parts[1]
	}
	return net.ParseIP(ip) != nil
}

// Обновим функцию addConnection
func addConnection(app *tview.Application, connectionsList *tview.List) {
	var form *tview.Form
	errorText := tview.NewTextView().SetText("")
	form = tview.NewForm().
		AddInputField("SSH сервер", "", 30, nil, func(text string) {
			if text == "" {
				return
			}
			if isConnectionExists(text) {
				errorText.SetText("Такое соединение уже существует")
				return
			}
			if strings.Contains(text, "@") {
				parts := strings.Split(text, "@")
				if isValidIP(parts[1]) {
					errorText.SetText("IP адрес не допускается, используйте имя хоста")
					return
				}
			}
			errorText.SetText("")
		}).
		AddInputField("Комментарий", "", 30, nil, nil).
		AddButton("Сохранить", func() {
			server := form.GetFormItem(0).(*tview.InputField).GetText()
			comment := form.GetFormItem(1).(*tview.InputField).GetText()
			if server == "" {
				errorText.SetText("Введите адрес сервера")
				return
			}
			if comment == "" {
				errorText.SetText("Введите комментарий")
				return
			}
			if !isConnectionExists(server) &&
				(!strings.Contains(server, "@") || !isValidIP(strings.Split(server, "@")[1])) {
				connection := SSHConnection{Server: server, Comment: comment}
				sshConnections = append(sshConnections, connection)

				// Добавляем новый пункт
				newIndex := connectionsList.GetItemCount()
				connectionsList.AddItem(fmt.Sprintf("%s - %s", server, comment), "", 0, func() {
					showMessage(app, connectionsList, server)
				})
				saveConnections()

				// Создаем новый flex и устанавливаем фокус на новый пункт
				lists := tview.NewFlex().
					SetDirection(tview.FlexRow).
					AddItem(connectionsList, 0, 2, true).
					AddItem(menuList, 0, 1, false).
					AddItem(helpText, 0, 1, false)
				app.SetRoot(centerWidget(lists), true)
				connectionsList.SetCurrentItem(newIndex) // Устанавливаем фокус на новый пункт
			}
		}).
		AddButton("Отмена", func() {
			lists := tview.NewFlex().
				SetDirection(tview.FlexRow).
				AddItem(connectionsList, 0, 2, true).
				AddItem(menuList, 0, 1, false).
				AddItem(helpText, 0, 1, false)
			app.SetRoot(centerWidget(lists), true)
		})

	// Создаем flex для формы с сообщениями об ошибках
	formFlex := tview.NewFlex().
		SetDirection(tview.FlexRow).
		AddItem(form, 0, 1, true).
		AddItem(errorText, 1, 0, false)

	formFlex.SetBorder(true).SetTitle("Добавить соединение").SetTitleAlign(tview.AlignLeft)
	app.SetRoot(centerWidget(formFlex), true)
}

// Функция для сохранения списка соединений в файл
func saveConnections() {
	// Ensure the config directory exists
	if err := os.MkdirAll(configDir, 0755); err != nil {
		log.Printf("Ошибка создания директории конфигурации: %v\n", err)
		return
	}

	// Используем MarshalIndent вместо Marshal для форматированного вывода
	data, err := json.MarshalIndent(sshConnections, "", "    ")
	if err != nil {
		log.Printf("Ошибка сохранения соединений: %v\n", err)
		return
	}

	// Добавляем перевод строки в конец файла
	data = append(data, '\n')

	err = ioutil.WriteFile(configFilePath, data, 0644)
	if err != nil {
		log.Printf("Ошибка записи файла: %v\n", err)
	}
}

// Функция для загрузки списка соединений из файла
func loadConnections() {
	data, err := ioutil.ReadFile(configFilePath)
	if err != nil {
		if !os.IsNotExist(err) {
			log.Printf("Ошибка чтения файла: %v\n", err)
		}
		return
	}
	err = json.Unmarshal(data, &sshConnections)
	if err != nil {
		log.Printf("Ошибка разбора файла: %v\n", err)
	}
}

// Обновим функцию showMessage для подтверждения соединения
func showMessage(app *tview.Application, list *tview.List, server string) {
	modal := tview.NewModal().
		SetText(fmt.Sprintf("Подключиться к %s?", server)).
		AddButtons([]string{"OK", "Отмена"}).
		SetDoneFunc(func(buttonIndex int, buttonLabel string) {
			if buttonLabel == "OK" {
				app.Suspend(func() {
					sshConnect(server)
				})
			}
			lists := tview.NewFlex().
				SetDirection(tview.FlexRow).
				AddItem(list, 0, 2, true).
				AddItem(menuList, 0, 1, false).
				AddItem(helpText, 0, 1, false)
			app.SetRoot(centerWidget(lists), true)
		})
	app.SetRoot(centerWidget(modal), true)
}

// Добавим новую функцию для открытия конфига
func openConfig() {
	cmd := exec.Command("open", configFilePath)
	err := cmd.Run()
	if err != nil {
		log.Printf("Ошибка открытия конфига: %v\n", err)
	}
}

// Добавим функцию для удаления соединения
func deleteConnection(app *tview.Application, list *tview.List, index int) {
	if index < 0 || index >= len(sshConnections) {
		return
	}

	server := sshConnections[index].Server
	modal := tview.NewModal().
		SetText(fmt.Sprintf("Удалить соединение %s?", server)).
		AddButtons([]string{"OK", "Отмена"}).
		SetDoneFunc(func(buttonIndex int, buttonLabel string) {
			if buttonLabel == "OK" {
				// Удаляем из слайса
				sshConnections = append(sshConnections[:index], sshConnections[index+1:]...)
				// Удаляем из списка
				list.RemoveItem(index)
				// Сохраняем изменения
				saveConnections()
			}

			// Возвращаемся к основному экрану
			lists := tview.NewFlex().
				SetDirection(tview.FlexRow).
				AddItem(list, 0, 2, true).
				AddItem(menuList, 0, 1, false).
				AddItem(helpText, 0, 1, false)
			app.SetRoot(centerWidget(lists), true)
		})
	app.SetRoot(centerWidget(modal), true)
}

// Добавим функцию для редактирования соединения
func editConnection(app *tview.Application, connectionsList *tview.List, index int) {
	if index < 0 || index >= len(sshConnections) {
		return
	}

	connection := sshConnections[index]
	var form *tview.Form
	errorText := tview.NewTextView().SetText("")
	form = tview.NewForm().
		AddInputField("SSH сервер", connection.Server, 30, nil, func(text string) {
			if text == "" {
				return
			}
			if text != connection.Server && isConnectionExists(text) {
				errorText.SetText("Такое соединение уже существует")
				return
			}
			if strings.Contains(text, "@") {
				parts := strings.Split(text, "@")
				if isValidIP(parts[1]) {
					errorText.SetText("IP адрес не допускается, используйте имя хоста")
					return
				}
			}
			errorText.SetText("")
		}).
		AddInputField("Порт", connection.Port, 5, nil, nil).
		AddInputField("Комментарий", connection.Comment, 30, nil, nil).
		AddButton("Сохранить", func() {
			server := form.GetFormItem(0).(*tview.InputField).GetText()
			port := form.GetFormItem(1).(*tview.InputField).GetText()
			comment := form.GetFormItem(2).(*tview.InputField).GetText()

			if server == "" {
				errorText.SetText("Введите адрес сервера")
				return
			}
			if comment == "" {
				errorText.SetText("Введите комментарий")
				return
			}

			if (server == connection.Server || !isConnectionExists(server)) &&
				(!strings.Contains(server, "@") || !isValidIP(strings.Split(server, "@")[1])) {
				sshConnections[index] = SSHConnection{Server: server, Port: port, Comment: comment}
				connectionsList.RemoveItem(index)
				connectionsList.InsertItem(index, fmt.Sprintf("%s - %s", server, comment), "", 0, func() {
					showContextMenu(app, connectionsList, index)
				})
				saveConnections()

				lists := tview.NewFlex().
					SetDirection(tview.FlexRow).
					AddItem(connectionsList, 0, 2, true).
					AddItem(menuList, 0, 1, false).
					AddItem(helpText, 0, 1, false)
				app.SetRoot(centerWidget(lists), true)
			}
		}).
		AddButton("Отмена", func() {
			lists := tview.NewFlex().
				SetDirection(tview.FlexRow).
				AddItem(connectionsList, 0, 2, true).
				AddItem(menuList, 0, 1, false).
				AddItem(helpText, 0, 1, false)
			app.SetRoot(centerWidget(lists), true)
			app.SetRoot(centerWidget(lists), true)
		})

	formFlex := tview.NewFlex().
		SetDirection(tview.FlexRow).
		AddItem(form, 0, 1, true).
		AddItem(errorText, 1, 0, false)

	formFlex.SetBorder(true).SetTitle("Редактировать соединение").SetTitleAlign(tview.AlignLeft)
	app.SetRoot(centerWidget(formFlex), true)
}

// Добавим функцию для отображения контекстного меню
func showContextMenu(app *tview.Application, connectionsList *tview.List, index int) {
	if index < 0 || index >= len(sshConnections) {
		return
	}

	server := sshConnections[index].Server
	list := tview.NewList().
		AddItem("Подключить", "", 0, func() {
			showMessage(app, connectionsList, server)
		}).
		AddItem("Редактировать", "", 0, func() {
			editConnection(app, connectionsList, index)
		}).
		AddItem("Отмена", "", 0, func() {
			lists := tview.NewFlex().
				SetDirection(tview.FlexRow).
				AddItem(connectionsList, 0, 2, true).
				AddItem(menuList, 0, 1, false).
				AddItem(helpText, 0, 1, false)
			app.SetRoot(centerWidget(lists), true)
		})

	list.SetBorder(true).
		SetTitle(fmt.Sprintf("Действия для %s", server)).
		SetTitleAlign(tview.AlignLeft)

	app.SetRoot(centerWidget(list), true)
}

// Главная функция
func main() {
	app := tview.NewApplication()

	// Загрузка списка соединений из файла
	loadConnections()

	// Создание списка соединений
	connectionsList := tview.NewList().ShowSecondaryText(false)
	connectionsList.SetTitle("Соединения").SetBorder(true).SetTitleAlign(tview.AlignLeft)

	// Создание меню
	menuList = tview.NewList().ShowSecondaryText(false) // убрать var
	menuList.SetTitle("Меню").SetBorder(true).SetTitleAlign(tview.AlignLeft)

	// Добавление существующих соединений
	if len(sshConnections) == 0 {
		connectionsList.AddItem("Нет сохраненных соединений", "", 0, nil)
	} else {
		for i, conn := range sshConnections {
			server := conn.Server
			comment := conn.Comment
			index := i // Create a copy of the index for the closure
			connectionsList.AddItem(fmt.Sprintf("%s - %s", server, comment), "", 0, func() {
				showContextMenu(app, connectionsList, index)
			})
		}
	}

	// Добавление пунктов меню
	menuList.AddItem("Добавить соединение", "", 0, func() {
		addConnection(app, connectionsList)
	})
	menuList.AddItem("Редактировать конфиг", "", 0, func() {
		openConfig()
	})
	menuList.AddItem("Выход", "", 0, func() {
		app.Stop()
	})

	// Создание справки
	helpText = tview.NewTextView(). // Using global variable
					SetText("Управление:\n" +
			"↑↓ - Навигация по списку\n" +
			"Enter - Подключиться\n" +
			"e, E - Редактировать выбранное соединение\n" +
			"Ctrl+N - Добавить новое соединение\n" +
			"Del - Удалить выбранное соединение\n" +
			"Ctrl+C - Выход").
		SetTextAlign(tview.AlignLeft)
	helpText.SetBorder(true).SetTitle("Помощь").SetTitleAlign(tview.AlignLeft)

	// Создаем вертикальный flex для списков и справки
	lists := tview.NewFlex().
		SetDirection(tview.FlexRow).
		AddItem(connectionsList, 0, 2, true).
		AddItem(menuList, 0, 1, false).
		AddItem(helpText, 0, 1, false)

	// Центрируем общий контейнер
	flex := centerWidget(lists)

	// Обновляем обработчик клавиш в main()
	app.SetInputCapture(func(event *tcell.EventKey) *tcell.EventKey {
		// Получаем текущий активный примитив
		primitive := app.GetFocus()

		// Если активно модальное окно, пропускаем обработку клавиш
		if _, ok := primitive.(*tview.Modal); ok {
			return event // Позволяем tview самостоятельно обрабатывать клавиши в модальном окне
		}

		switch event.Key() {
		case tcell.KeyCtrlC:
			app.Stop()
		case tcell.KeyDown:
			if app.GetFocus() == connectionsList {
				// Если достигли конца списка соединений
				if connectionsList.GetCurrentItem() == connectionsList.GetItemCount()-1 {
					app.SetFocus(menuList)
					menuList.SetCurrentItem(0)
					return nil
				}
			} else if app.GetFocus() == menuList {
				// Если достигли конца меню
				if menuList.GetCurrentItem() == menuList.GetItemCount()-1 {
					app.SetFocus(connectionsList)
					connectionsList.SetCurrentItem(0)
					return nil
				}
			}
		case tcell.KeyUp:
			if app.GetFocus() == connectionsList {
				// Если в начале списка соединений
				if connectionsList.GetCurrentItem() == 0 {
					app.SetFocus(menuList)
					menuList.SetCurrentItem(menuList.GetItemCount() - 1)
					return nil
				}
			} else if app.GetFocus() == menuList {
				// Если в начале меню
				if menuList.GetCurrentItem() == 0 {
					app.SetFocus(connectionsList)
					connectionsList.SetCurrentItem(connectionsList.GetItemCount() - 1)
					return nil
				}
			} /*
				case tcell.KeyEnter:
					if app.GetFocus() == connectionsList && connectionsList.GetItemCount() > 0 {
						currentIndex := connectionsList.GetCurrentItem()
						if currentIndex >= 0 && currentIndex < len(sshConnections) {
							showMessage(app, connectionsList, sshConnections[currentIndex].Server)
						}
					}
					return nil*/
		case tcell.KeyRune:
			if app.GetFocus() == connectionsList && connectionsList.GetItemCount() > 0 {
				if event.Rune() == 'e' || event.Rune() == 'E' {
					currentIndex := connectionsList.GetCurrentItem()
					if currentIndex >= 0 && currentIndex < len(sshConnections) {
						modal := tview.NewModal().
							SetText(fmt.Sprintf("Редактировать соединение %s?", sshConnections[currentIndex].Server)).
							AddButtons([]string{"OK", "Отмена"}).
							SetDoneFunc(func(buttonIndex int, buttonLabel string) {
								if buttonLabel == "OK" {
									editConnection(app, connectionsList, currentIndex)
								} else {
									lists := tview.NewFlex().
										SetDirection(tview.FlexRow).
										AddItem(connectionsList, 0, 2, true).
										AddItem(menuList, 0, 1, false).
										AddItem(helpText, 0, 1, false)
									app.SetRoot(centerWidget(lists), true)
								}
							})
						app.SetRoot(centerWidget(modal), true)
					}
				}
			}
			return nil
		case tcell.KeyCtrlN:
			// Показываем окно добавления нового соединения
			modal := tview.NewModal().
				SetText("Добавить новое соединение?").
				AddButtons([]string{"OK", "Отмена"}).
				SetDoneFunc(func(buttonIndex int, buttonLabel string) {
					if buttonLabel == "OK" {
						addConnection(app, connectionsList)
					} else {
						lists := tview.NewFlex().
							SetDirection(tview.FlexRow).
							AddItem(connectionsList, 0, 2, true).
							AddItem(menuList, 0, 1, false).
							AddItem(helpText, 0, 1, false)
						app.SetRoot(centerWidget(lists), true)
					}
				})
			app.SetRoot(centerWidget(modal), true)
			return nil
		case tcell.KeyDelete:
			if app.GetFocus() == connectionsList && connectionsList.GetItemCount() > 0 {
				deleteConnection(app, connectionsList, connectionsList.GetCurrentItem())
			}
			return nil
		}
		return event
	})

	// Запуск приложения с flex контейнером
	if err := app.SetRoot(flex, true).EnableMouse(true).Run(); err != nil {
		log.Fatalf("Ошибка запуска приложения: %v\n", err)
	}
}
